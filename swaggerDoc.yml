swagger: "2.0"
info:
  description: "Image storage service stores the images onto the database"
  version: "1.0.0"
  title: "Swagger ImageStore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/v1"
schemes:
- "https"
- "http"
paths:
  /image:
    post:
      tags:
      - "Post Image"
      summary: "Add a new images to the database"
      description: "Inserts images into particular album"
      operationId: "addImage"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Image object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Image"
      responses:
        "405":
          description: "Invalid input"
        "200":
          description: "OK"
          schema:
            $ref: '#/definitions/PostImageResponse'
      security:
      - imagestore_auth:
        - "write:image"
        - "read:image"
  /image/{imageId}/{imageAlbumName}:  
    delete:
      tags:
      - "Delete Image by ID"
      summary: "Deletes an image based on ID from album"
      description: ""
      operationId: "deleteImage"
      produces:
      - "application/json"
      parameters:
      - name: "imageId"
        in: "path"
        description: "Image Id to delete"
        required: true
        type: "integer"
        format: "int64"
      - name: "imageAlbumName"
        in: "path"
        description: "Image Album name from where image has to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Image not found"
      security:
      - imagestore_auth:
        - "write:image"
        - "read:image"
    get:
      tags:
      - "Get Image by ID"
      summary: "Find Image by ID"
      description: "Returns a single image"
      operationId: "getImageById"
      produces:
      - "application/json"
      parameters:
      - name: "imageId"
        in: "path"
        description: "Image Id to get"
        required: true
        type: "integer"
      - name: "imageAlbumName"
        in: "path"
        description: "Image Album name where image has to be retrieved"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetSingleImage"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Image not found"
      security:
      - api_key: []
  /image/{imageAlbumName}:
    get:
      tags:
      - "get all Images"
      summary: "Find all images by album"
      description: "Returns all images from an album"
      operationId: "getAllImages"
      produces:
      - "application/json"
      parameters:
      - name: "imageAlbumName"
        in: "path"
        description: "Image Album name where images have to be retrieved"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GetSingleImage"
        "400":
          description: "Invalid Album supplied"
        "404":
          description: "Image not found"
      security:
      - api_key: []
securityDefinitions:
  imagestore_auth:
    type: "oauth2"
    authorizationUrl: "http://imageStore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:image: "modify images in album"
      read:image: "read images"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Image:
    type: "object"
    required:
    - "imageAlbumName"
    - "imageName"
    - "imageBase64Format"
    properties:
      imageAlbumName:
        type: "string"
        example: "myAlbum"
      imageName:
        type: "string"
        example: "myFirstImage"
      imageBase64Format:
        type: "string"
        example: "base64Image"
    xml:
      name: "Image"
      
  GetSingleImage:
    type: "object"
    required:
    - "imageId"
    - "imageAlbumName"
    - "imageName"
    - "imageBase64Format"
    - "createdAt"
    properties:
      imageId:
        type: "integer"
        example: 1
      imageAlbumName:
        type: "string"
        example: "myAlbum"
      imageName:
        type: "string"
        example: "myFirstImage"
      imageBase64Format:
        type: "string"
        example: "base64Image"
      createdAt:
        type: "string"
        example: "2020-10-15T12:05:32.000Z"
    xml:
      name: "Image"
  PostImageResponse:
    type: "object"
    properties:
      code:
        type: "string"
        example: "200"
      type:
        type: "string"
        example: "OK"
      message:
        type: "string"
        example: "successfull"
      data:
        $ref: "#/definitions/Data"
  Data:
    type: "object"
    properties:
      ImageID: 
        type: "string"
        example: "1"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
